name: Test

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
      - uses: pre-commit/action@v3.0.0

  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        test:
          - ldap-singleuser
          - keycloak

    steps:
      - uses: actions/checkout@v4

      # https://github.com/jupyterhub/action-k3s-helm/
      - uses: jupyterhub/action-k3s-helm@v3
        with:
          k3s-channel: v1.24

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: dev-requirements.txt

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          # If playwright version is bumped then refresh browsers
          key: ${{ runner.os }}-playwright-${{ hashFiles('dev-requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install -r dev-requirements.txt
          playwright install firefox

      - name: Set k8s ingress address
        run: |
          # Needs to resolve inside and outside the cluster
          K8S_HOSTNAME=$(hostname -I | awk '{print $1}').nip.io
          echo "K8S_HOSTNAME=$K8S_HOSTNAME" >> $GITHUB_ENV

      - name: Install deployment
        run: |
          cd ${{ matrix.test }}
          ../ci/run_codeblocks.py README.md --sub "<k8s-hostname>=$K8S_HOSTNAME" --run

      - name: Run tests
        run: |
          cd ${{ matrix.test }}
          pytest --browser firefox --base-url "http://$K8S_HOSTNAME"

      - name: Get logs on failure
        if: failure()
        run: |
          echo "::group::keycloak"
          kubectl logs statefulset/keycloak
          echo "::endgroup::"
          echo "::group::hub"
          kubectl logs deploy/hub
          echo "::endgroup::"

  # Set a single status check for the whole workflow, so that we can use it in a
  # branch protection rule
  status-check:
    runs-on: ubuntu-latest
    needs:
      - pre-commit
      - test
    if: always()
    steps:
      - name: Get job statuses
        uses: technote-space/workflow-conclusion-action@v3.0.3
        with:
          FALLBACK_CONCLUSION: failure
          STRICT_SUCCESS: true
        # Status is saved in env.WORKFLOW_CONCLUSION

      - name: Status check
        if: env.WORKFLOW_CONCLUSION != 'success'
        run: |
          exit 1
